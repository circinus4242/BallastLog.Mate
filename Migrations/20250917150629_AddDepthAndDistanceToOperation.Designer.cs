// <auto-generated />
using System;
using BallastLog.Mate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BallastLog.Mate.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917150629_AddDepthAndDistanceToOperation")]
    partial class AddDepthAndDistanceToOperation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("BallastLog.Mate.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("BwtsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom5")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DistanceNearestLand")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FlowRate")
                        .HasColumnType("REAL");

                    b.Property<string>("LocationStart")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationStop")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinDepth")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RecordedToFm232")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RecordedToLogBook")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartLocal")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StopLocal")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TzOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("BallastLog.Mate.Models.OperationLeg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Delta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSea")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TankId")
                        .HasColumnType("TEXT");

                    b.Property<int>("VolumeAfter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VolumeBefore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("TankId");

                    b.ToTable("OperationLegs");
                });

            modelBuilder.Entity("BallastLog.Mate.Models.ShipProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Custom1Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom2Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom3Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom4Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom5Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxFlowRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipClass")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShipProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxFlowRate = 0,
                            ShipName = ""
                        });
                });

            modelBuilder.Entity("BallastLog.Mate.Models.Tank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InitialCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("BallastLog.Mate.Models.OperationLeg", b =>
                {
                    b.HasOne("BallastLog.Mate.Models.Operation", "Operation")
                        .WithMany("Legs")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BallastLog.Mate.Models.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId");

                    b.Navigation("Operation");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("BallastLog.Mate.Models.Operation", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
